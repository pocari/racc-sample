#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class PolishConverter < Racc::Parser

module_eval(<<'...end polish_converter.y/module_eval...', 'polish_converter.y', 22)
  def parse(str)
    @tokens = str.scan(/\d+|\S/)
    puts "#{str} is "
    do_parse
  end

  def next_token
    t = @tokens.shift
    case t
    when /\d+/
      [:NUM, t.to_i]
    when nil
      nil
    else
      [t, t]
    end
  end
...end polish_converter.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     7,     8,    10,    11,     5,     6,     7,     8,    12,
    13,     5,     6,     7,     8,     9,    22,     5,     6,     7,
     8,    17,   nil,     5,     6,     7,     8,   nil,   nil,     5,
     6,     7,     8,   nil,   nil,     5,     6,     7,     8,   nil,
   nil,     5,     6,     7,     8,   nil,   nil,     5 ]

racc_action_check = [
     0,     0,     0,     3,     3,     0,     8,     8,     8,     4,
     4,     8,    10,    10,    10,     1,    14,    10,    11,    11,
    11,     9,   nil,    11,    12,    12,    12,   nil,   nil,    12,
    13,    13,    13,   nil,   nil,    13,     5,     5,     5,   nil,
   nil,     5,     7,     7,     7,   nil,   nil,     7 ]

racc_action_pointer = [
    -2,    15,   nil,     0,     4,    34,   nil,    40,     4,    21,
    10,    16,    22,    28,     8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -2,   -13,    -1,    -5,    -8,   -13,   -10,   -13,   -13,   -13,
   -13,   -13,   -13,   -13,   -13,   -11,   -12,    23,    -3,    -4,
    -6,    -7,    -9 ]

racc_goto_table = [
     2,    20,    21,    15,    16,    14,     1,   nil,   nil,   nil,
    18,    19 ]

racc_goto_check = [
     2,     3,     3,     4,     4,     2,     1,   nil,   nil,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,     6,     0,   -11,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 10, :_reduce_1,
  0, 10, :_reduce_none,
  3, 11, :_reduce_3,
  3, 11, :_reduce_4,
  1, 11, :_reduce_5,
  3, 12, :_reduce_6,
  3, 12, :_reduce_7,
  1, 12, :_reduce_8,
  3, 13, :_reduce_9,
  1, 13, :_reduce_10,
  2, 13, :_reduce_11,
  2, 13, :_reduce_12 ]

racc_reduce_n = 13

racc_shift_n = 23

racc_token_table = {
  false => 0,
  :error => 1,
  :NUM => 2,
  "+" => 3,
  "-" => 4,
  "*" => 5,
  "/" => 6,
  "(" => 7,
  ")" => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUM",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "exp",
  "term",
  "primary" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'polish_converter.y', 4)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'polish_converter.y', 7)
  def _reduce_3(val, _values, result)
     result = [:+, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 8)
  def _reduce_4(val, _values, result)
     result = [:-, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 9)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 11)
  def _reduce_6(val, _values, result)
     result = [:*, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 12)
  def _reduce_7(val, _values, result)
     result = ["/".to_sym, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 13)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 15)
  def _reduce_9(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 16)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 17)
  def _reduce_11(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'polish_converter.y', 18)
  def _reduce_12(val, _values, result)
     result = [:-, val[1]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class PolishConverter
